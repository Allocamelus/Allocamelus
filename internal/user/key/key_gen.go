package key

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "embed"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Private) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Public":
			err = z.Public.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Public")
				return
			}
		case "AuthKeyHash":
			z.AuthKeyHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthKeyHash")
				return
			}
		case "AuthKeySalt":
			z.AuthKeySalt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthKeySalt")
				return
			}
		case "PrivateArmored":
			err = z.PrivateArmored.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PrivateArmored")
				return
			}
		case "RecoveryKeyHash":
			z.RecoveryKeyHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RecoveryKeyHash")
				return
			}
		case "RecoveryArmored":
			err = z.RecoveryArmored.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "RecoveryArmored")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Private) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Public"
	err = en.Append(0x86, 0xa6, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63)
	if err != nil {
		return
	}
	err = z.Public.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Public")
		return
	}
	// write "AuthKeyHash"
	err = en.Append(0xab, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "AuthKeyHash")
		return
	}
	// write "AuthKeySalt"
	err = en.Append(0xab, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x61, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthKeySalt)
	if err != nil {
		err = msgp.WrapError(err, "AuthKeySalt")
		return
	}
	// write "PrivateArmored"
	err = en.Append(0xae, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.PrivateArmored.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PrivateArmored")
		return
	}
	// write "RecoveryKeyHash"
	err = en.Append(0xaf, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.RecoveryKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "RecoveryKeyHash")
		return
	}
	// write "RecoveryArmored"
	err = en.Append(0xaf, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.RecoveryArmored.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "RecoveryArmored")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Private) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Public"
	o = append(o, 0x86, 0xa6, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63)
	o, err = z.Public.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Public")
		return
	}
	// string "AuthKeyHash"
	o = append(o, 0xab, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.AuthKeyHash)
	// string "AuthKeySalt"
	o = append(o, 0xab, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x61, 0x6c, 0x74)
	o = msgp.AppendString(o, z.AuthKeySalt)
	// string "PrivateArmored"
	o = append(o, 0xae, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	o, err = z.PrivateArmored.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PrivateArmored")
		return
	}
	// string "RecoveryKeyHash"
	o = append(o, 0xaf, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.RecoveryKeyHash)
	// string "RecoveryArmored"
	o = append(o, 0xaf, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	o, err = z.RecoveryArmored.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "RecoveryArmored")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Private) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Public":
			bts, err = z.Public.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Public")
				return
			}
		case "AuthKeyHash":
			z.AuthKeyHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthKeyHash")
				return
			}
		case "AuthKeySalt":
			z.AuthKeySalt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthKeySalt")
				return
			}
		case "PrivateArmored":
			bts, err = z.PrivateArmored.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrivateArmored")
				return
			}
		case "RecoveryKeyHash":
			z.RecoveryKeyHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecoveryKeyHash")
				return
			}
		case "RecoveryArmored":
			bts, err = z.RecoveryArmored.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecoveryArmored")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Private) Msgsize() (s int) {
	s = 1 + 7 + z.Public.Msgsize() + 12 + msgp.StringPrefixSize + len(z.AuthKeyHash) + 12 + msgp.StringPrefixSize + len(z.AuthKeySalt) + 15 + z.PrivateArmored.Msgsize() + 16 + msgp.StringPrefixSize + len(z.RecoveryKeyHash) + 16 + z.RecoveryArmored.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Public) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "userId":
			z.UserID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "created":
			z.Created, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		case "replaced":
			z.Replaced, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Replaced")
				return
			}
		case "publicArmored":
			err = z.PublicArmored.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PublicArmored")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Public) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "id"
	err = en.Append(0x85, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "userId"
	err = en.Append(0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "created"
	err = en.Append(0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Created)
	if err != nil {
		err = msgp.WrapError(err, "Created")
		return
	}
	// write "replaced"
	err = en.Append(0xa8, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Replaced)
	if err != nil {
		err = msgp.WrapError(err, "Replaced")
		return
	}
	// write "publicArmored"
	err = en.Append(0xad, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.PublicArmored.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PublicArmored")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Public) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "id"
	o = append(o, 0x85, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.ID)
	// string "userId"
	o = append(o, 0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.UserID)
	// string "created"
	o = append(o, 0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Created)
	// string "replaced"
	o = append(o, 0xa8, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Replaced)
	// string "publicArmored"
	o = append(o, 0xad, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64)
	o, err = z.PublicArmored.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PublicArmored")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Public) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "userId":
			z.UserID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "created":
			z.Created, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		case "replaced":
			z.Replaced, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Replaced")
				return
			}
		case "publicArmored":
			bts, err = z.PublicArmored.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PublicArmored")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Public) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 7 + msgp.Int64Size + 8 + msgp.Int64Size + 9 + msgp.Int64Size + 14 + z.PublicArmored.Msgsize()
	return
}

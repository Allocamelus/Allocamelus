package key

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "publicKey":
			err = z.PublicKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "privateKeySalt":
			z.PrivateKeySalt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PrivateKeySalt")
				return
			}
		case "encPrivateKey":
			z.PrivateKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PrivateKey")
				return
			}
		case "backupKey":
			z.BackupKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BackupKey")
				return
			}
		case "recoveryKeyHash":
			z.RecoveryKeyHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RecoveryKeyHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Key) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.PrivateKeySalt == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.PrivateKey == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.BackupKey == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.RecoveryKeyHash == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "publicKey"
	err = en.Append(0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.PublicKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "privateKeySalt"
		err = en.Append(0xae, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x61, 0x6c, 0x74)
		if err != nil {
			return
		}
		err = en.WriteString(z.PrivateKeySalt)
		if err != nil {
			err = msgp.WrapError(err, "PrivateKeySalt")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "encPrivateKey"
		err = en.Append(0xad, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.PrivateKey)
		if err != nil {
			err = msgp.WrapError(err, "PrivateKey")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "backupKey"
		err = en.Append(0xa9, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.BackupKey)
		if err != nil {
			err = msgp.WrapError(err, "BackupKey")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "recoveryKeyHash"
		err = en.Append(0xaf, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
		if err != nil {
			return
		}
		err = en.WriteString(z.RecoveryKeyHash)
		if err != nil {
			err = msgp.WrapError(err, "RecoveryKeyHash")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Key) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.PrivateKeySalt == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.PrivateKey == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.BackupKey == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.RecoveryKeyHash == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.ID)
	// string "publicKey"
	o = append(o, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	o, err = z.PublicKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "privateKeySalt"
		o = append(o, 0xae, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x61, 0x6c, 0x74)
		o = msgp.AppendString(o, z.PrivateKeySalt)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "encPrivateKey"
		o = append(o, 0xad, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79)
		o = msgp.AppendString(o, z.PrivateKey)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "backupKey"
		o = append(o, 0xa9, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79)
		o = msgp.AppendString(o, z.BackupKey)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "recoveryKeyHash"
		o = append(o, 0xaf, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
		o = msgp.AppendString(o, z.RecoveryKeyHash)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "publicKey":
			bts, err = z.PublicKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "privateKeySalt":
			z.PrivateKeySalt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrivateKeySalt")
				return
			}
		case "encPrivateKey":
			z.PrivateKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrivateKey")
				return
			}
		case "backupKey":
			z.BackupKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BackupKey")
				return
			}
		case "recoveryKeyHash":
			z.RecoveryKeyHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecoveryKeyHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Key) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 10 + z.PublicKey.Msgsize() + 15 + msgp.StringPrefixSize + len(z.PrivateKeySalt) + 14 + msgp.StringPrefixSize + len(z.PrivateKey) + 10 + msgp.StringPrefixSize + len(z.BackupKey) + 16 + msgp.StringPrefixSize + len(z.RecoveryKeyHash)
	return
}

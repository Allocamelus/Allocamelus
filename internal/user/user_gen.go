package user

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Perms) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int64
		zb0001, err = dc.ReadInt64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Perms(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Perms) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt64(int64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Perms) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt64(o, int64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Perms) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int64
		zb0001, bts, err = msgp.ReadInt64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Perms(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Perms) Msgsize() (s int) {
	s = msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Session) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "loggedIn":
			z.LoggedIn, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "LoggedIn")
				return
			}
		case "userId":
			z.UserID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "userName":
			z.UserName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "perms":
			{
				var zb0002 int64
				zb0002, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Perms")
					return
				}
				z.Perms = Perms(zb0002)
			}
		case "privateKey":
			err = z.PrivateKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PrivateKey")
				return
			}
		case "loginToken":
			z.LoginToken, err = dc.ReadBytes(z.LoginToken)
			if err != nil {
				err = msgp.WrapError(err, "LoginToken")
				return
			}
		case "notNew":
			z.NotNew, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NotNew")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Session) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "loggedIn"
	err = en.Append(0x87, 0xa8, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.LoggedIn)
	if err != nil {
		err = msgp.WrapError(err, "LoggedIn")
		return
	}
	// write "userId"
	err = en.Append(0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "userName"
	err = en.Append(0xa8, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserName)
	if err != nil {
		err = msgp.WrapError(err, "UserName")
		return
	}
	// write "perms"
	err = en.Append(0xa5, 0x70, 0x65, 0x72, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(int64(z.Perms))
	if err != nil {
		err = msgp.WrapError(err, "Perms")
		return
	}
	// write "privateKey"
	err = en.Append(0xaa, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.PrivateKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PrivateKey")
		return
	}
	// write "loginToken"
	err = en.Append(0xaa, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.LoginToken)
	if err != nil {
		err = msgp.WrapError(err, "LoginToken")
		return
	}
	// write "notNew"
	err = en.Append(0xa6, 0x6e, 0x6f, 0x74, 0x4e, 0x65, 0x77)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NotNew)
	if err != nil {
		err = msgp.WrapError(err, "NotNew")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Session) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "loggedIn"
	o = append(o, 0x87, 0xa8, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e)
	o = msgp.AppendBool(o, z.LoggedIn)
	// string "userId"
	o = append(o, 0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.UserID)
	// string "userName"
	o = append(o, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserName)
	// string "perms"
	o = append(o, 0xa5, 0x70, 0x65, 0x72, 0x6d, 0x73)
	o = msgp.AppendInt64(o, int64(z.Perms))
	// string "privateKey"
	o = append(o, 0xaa, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79)
	o, err = z.PrivateKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PrivateKey")
		return
	}
	// string "loginToken"
	o = append(o, 0xaa, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendBytes(o, z.LoginToken)
	// string "notNew"
	o = append(o, 0xa6, 0x6e, 0x6f, 0x74, 0x4e, 0x65, 0x77)
	o = msgp.AppendBool(o, z.NotNew)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Session) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "loggedIn":
			z.LoggedIn, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LoggedIn")
				return
			}
		case "userId":
			z.UserID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "userName":
			z.UserName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "perms":
			{
				var zb0002 int64
				zb0002, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Perms")
					return
				}
				z.Perms = Perms(zb0002)
			}
		case "privateKey":
			bts, err = z.PrivateKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrivateKey")
				return
			}
		case "loginToken":
			z.LoginToken, bts, err = msgp.ReadBytesBytes(bts, z.LoginToken)
			if err != nil {
				err = msgp.WrapError(err, "LoginToken")
				return
			}
		case "notNew":
			z.NotNew, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NotNew")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Session) Msgsize() (s int) {
	s = 1 + 9 + msgp.BoolSize + 7 + msgp.Int64Size + 9 + msgp.StringPrefixSize + len(z.UserName) + 6 + msgp.Int64Size + 11 + z.PrivateKey.Msgsize() + 11 + msgp.BytesPrefixSize + len(z.LoginToken) + 7 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Types) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int8
		zb0001, err = dc.ReadInt8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Types(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Types) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt8(int8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Types) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt8(o, int8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Types) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int8
		zb0001, bts, err = msgp.ReadInt8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Types(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Types) Msgsize() (s int) {
	s = msgp.Int8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *User) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "userName":
			z.UserName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "avatar":
			z.Avatar, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Avatar")
				return
			}
		case "bio":
			z.Bio, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bio")
				return
			}
		case "likes":
			z.Likes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Likes")
				return
			}
		case "type":
			{
				var zb0002 int8
				zb0002, err = dc.ReadInt8()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = Types(zb0002)
			}
		case "permissions":
			{
				var zb0003 int64
				zb0003, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Permissions")
					return
				}
				z.Permissions = Perms(zb0003)
			}
		case "created":
			z.Created, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *User) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "id"
	err = en.Append(0x8a, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "userName"
	err = en.Append(0xa8, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserName)
	if err != nil {
		err = msgp.WrapError(err, "UserName")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "email"
	err = en.Append(0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	// write "avatar"
	err = en.Append(0xa6, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Avatar)
	if err != nil {
		err = msgp.WrapError(err, "Avatar")
		return
	}
	// write "bio"
	err = en.Append(0xa3, 0x62, 0x69, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bio)
	if err != nil {
		err = msgp.WrapError(err, "Bio")
		return
	}
	// write "likes"
	err = en.Append(0xa5, 0x6c, 0x69, 0x6b, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Likes)
	if err != nil {
		err = msgp.WrapError(err, "Likes")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt8(int8(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "permissions"
	err = en.Append(0xab, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(int64(z.Permissions))
	if err != nil {
		err = msgp.WrapError(err, "Permissions")
		return
	}
	// write "created"
	err = en.Append(0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Created)
	if err != nil {
		err = msgp.WrapError(err, "Created")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *User) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "id"
	o = append(o, 0x8a, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.ID)
	// string "userName"
	o = append(o, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserName)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "email"
	o = append(o, 0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	// string "avatar"
	o = append(o, 0xa6, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72)
	o = msgp.AppendBool(o, z.Avatar)
	// string "bio"
	o = append(o, 0xa3, 0x62, 0x69, 0x6f)
	o = msgp.AppendString(o, z.Bio)
	// string "likes"
	o = append(o, 0xa5, 0x6c, 0x69, 0x6b, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Likes)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt8(o, int8(z.Type))
	// string "permissions"
	o = append(o, 0xab, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendInt64(o, int64(z.Permissions))
	// string "created"
	o = append(o, 0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Created)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *User) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "userName":
			z.UserName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "avatar":
			z.Avatar, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Avatar")
				return
			}
		case "bio":
			z.Bio, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bio")
				return
			}
		case "likes":
			z.Likes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Likes")
				return
			}
		case "type":
			{
				var zb0002 int8
				zb0002, bts, err = msgp.ReadInt8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = Types(zb0002)
			}
		case "permissions":
			{
				var zb0003 int64
				zb0003, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Permissions")
					return
				}
				z.Permissions = Perms(zb0003)
			}
		case "created":
			z.Created, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *User) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 9 + msgp.StringPrefixSize + len(z.UserName) + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.Email) + 7 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.Bio) + 6 + msgp.Int64Size + 5 + msgp.Int8Size + 12 + msgp.Int64Size + 8 + msgp.Int64Size
	return
}
